// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Platform.Infrastructure.Data;

namespace Platform.Infrastructure.Data.Migrations
{
    [DbContext(typeof(PlatformDbContext))]
    partial class PlatformDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Platform.Infrastructure.Entities.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActivityTemplateId");

                    b.Property<int?>("ArtifactId");

                    b.Property<string>("Description");

                    b.Property<bool>("IncludeArtifact");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("Obsolete");

                    b.Property<int?>("SectionId");

                    b.Property<int?>("SemesterId");

                    b.Property<int?>("TopicId");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTemplateId");

                    b.HasIndex("ArtifactId");

                    b.HasIndex("SectionId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("TopicId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Platform.Infrastructure.Entities.ActivityCheck", b =>
                {
                    b.Property<int>("ActivityId");

                    b.Property<int>("StudentId");

                    b.Property<bool>("IsChecked");

                    b.HasKey("ActivityId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("ActivityChecks");
                });

            modelBuilder.Entity("Platform.Infrastructure.Entities.ActivityTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<bool>("IncludeArtifact");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("Obsolete");

                    b.Property<int?>("TopicId");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("ActivityTemplates");
                });

            modelBuilder.Entity("Platform.Infrastructure.Entities.Artifact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuthorId");

                    b.Property<string>("ContentType");

                    b.Property<string>("Guid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("Obsolete");

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Artifacts");
                });

            modelBuilder.Entity("Platform.Infrastructure.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActivityId");

                    b.Property<int?>("AuthorId");

                    b.Property<string>("Content");

                    b.Property<DateTime>("DateTime");

                    b.Property<bool>("Obsolete");

                    b.Property<int?>("SectionId");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("SectionId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Platform.Infrastructure.Entities.Major", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("Obsolete");

                    b.HasKey("Id");

                    b.ToTable("Majors");
                });

            modelBuilder.Entity("Platform.Infrastructure.Entities.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Capacity");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("Obsolete");

                    b.Property<int?>("SemesterId");

                    b.Property<int>("State");

                    b.Property<int?>("SubjectId");

                    b.Property<int?>("TopicId");

                    b.HasKey("Id");

                    b.HasIndex("SemesterId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TopicId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("Platform.Infrastructure.Entities.Semester", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MajorId");

                    b.Property<bool>("Obsolete");

                    b.Property<string>("Password");

                    b.Property<int>("Season");

                    b.Property<int>("State");

                    b.Property<int?>("SubjectId");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("MajorId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Semesters");
                });

            modelBuilder.Entity("Platform.Infrastructure.Entities.StudentSection", b =>
                {
                    b.Property<int>("SectionId");

                    b.Property<int>("StudentId");

                    b.Property<int?>("Grade");

                    b.Property<int?>("SemesterId");

                    b.Property<int?>("SubjectId");

                    b.Property<int?>("TopicId");

                    b.HasKey("SectionId", "StudentId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TopicId");

                    b.ToTable("StudentSections");
                });

            modelBuilder.Entity("Platform.Infrastructure.Entities.StudentSemester", b =>
                {
                    b.Property<int>("SemesterId");

                    b.Property<int>("StudentId");

                    b.HasKey("SemesterId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentsSemesters");
                });

            modelBuilder.Entity("Platform.Infrastructure.Entities.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("Obsolete");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("Platform.Infrastructure.Entities.SubjectArtifact", b =>
                {
                    b.Property<int>("ArtifactId");

                    b.Property<int>("SubjectId");

                    b.HasKey("ArtifactId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("SubjectArtifact");
                });

            modelBuilder.Entity("Platform.Infrastructure.Entities.TeacherSubject", b =>
                {
                    b.Property<int>("TeacherId");

                    b.Property<int>("SubjectId");

                    b.HasKey("TeacherId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("TeachersSubjects");
                });

            modelBuilder.Entity("Platform.Infrastructure.Entities.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("Obsolete");

                    b.Property<int?>("SubjectId");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("Platform.Infrastructure.Entities.TopicArtifact", b =>
                {
                    b.Property<int>("ArtifactId");

                    b.Property<int>("TopicId");

                    b.HasKey("ArtifactId", "TopicId");

                    b.HasIndex("TopicId");

                    b.ToTable("TopicArtifact");
                });

            modelBuilder.Entity("Platform.Infrastructure.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<bool>("Obsolete");

                    b.Property<string>("SystemId");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("Platform.Infrastructure.Entities.Admin", b =>
                {
                    b.HasBaseType("Platform.Infrastructure.Entities.User");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("Platform.Infrastructure.Entities.Student", b =>
                {
                    b.HasBaseType("Platform.Infrastructure.Entities.User");

                    b.Property<int>("AlbumNumber");

                    b.Property<int>("MajorId");

                    b.Property<bool>("Verified");

                    b.HasIndex("AlbumNumber")
                        .IsUnique()
                        .HasFilter("[AlbumNumber] IS NOT NULL");

                    b.HasIndex("MajorId");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("Platform.Infrastructure.Entities.Teacher", b =>
                {
                    b.HasBaseType("Platform.Infrastructure.Entities.User");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("IX_User_Email1")
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("Platform.Infrastructure.Entities.Activity", b =>
                {
                    b.HasOne("Platform.Infrastructure.Entities.ActivityTemplate", "ActivityTemplate")
                        .WithMany()
                        .HasForeignKey("ActivityTemplateId");

                    b.HasOne("Platform.Infrastructure.Entities.Artifact", "Artifact")
                        .WithMany()
                        .HasForeignKey("ArtifactId");

                    b.HasOne("Platform.Infrastructure.Entities.Section", "Section")
                        .WithMany("Activities")
                        .HasForeignKey("SectionId");

                    b.HasOne("Platform.Infrastructure.Entities.Semester", "Semester")
                        .WithMany()
                        .HasForeignKey("SemesterId");

                    b.HasOne("Platform.Infrastructure.Entities.Topic", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId");
                });

            modelBuilder.Entity("Platform.Infrastructure.Entities.ActivityCheck", b =>
                {
                    b.HasOne("Platform.Infrastructure.Entities.Activity", "Activity")
                        .WithMany("ActivityToCheck")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Platform.Infrastructure.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Platform.Infrastructure.Entities.ActivityTemplate", b =>
                {
                    b.HasOne("Platform.Infrastructure.Entities.Topic")
                        .WithMany("ActivityTemplates")
                        .HasForeignKey("TopicId");
                });

            modelBuilder.Entity("Platform.Infrastructure.Entities.Artifact", b =>
                {
                    b.HasOne("Platform.Infrastructure.Entities.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");
                });

            modelBuilder.Entity("Platform.Infrastructure.Entities.Comment", b =>
                {
                    b.HasOne("Platform.Infrastructure.Entities.Activity")
                        .WithMany("Comments")
                        .HasForeignKey("ActivityId");

                    b.HasOne("Platform.Infrastructure.Entities.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("Platform.Infrastructure.Entities.Section")
                        .WithMany("Comments")
                        .HasForeignKey("SectionId");
                });

            modelBuilder.Entity("Platform.Infrastructure.Entities.Section", b =>
                {
                    b.HasOne("Platform.Infrastructure.Entities.Semester", "Semester")
                        .WithMany("Sections")
                        .HasForeignKey("SemesterId");

                    b.HasOne("Platform.Infrastructure.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId");

                    b.HasOne("Platform.Infrastructure.Entities.Topic", "Topic")
                        .WithMany("Sections")
                        .HasForeignKey("TopicId");
                });

            modelBuilder.Entity("Platform.Infrastructure.Entities.Semester", b =>
                {
                    b.HasOne("Platform.Infrastructure.Entities.Major", "Major")
                        .WithMany()
                        .HasForeignKey("MajorId");

                    b.HasOne("Platform.Infrastructure.Entities.Subject", "Subject")
                        .WithMany("Semesters")
                        .HasForeignKey("SubjectId");
                });

            modelBuilder.Entity("Platform.Infrastructure.Entities.StudentSection", b =>
                {
                    b.HasOne("Platform.Infrastructure.Entities.Section", "Section")
                        .WithMany("StudentsSections")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Platform.Infrastructure.Entities.Semester", "Semester")
                        .WithMany()
                        .HasForeignKey("SemesterId");

                    b.HasOne("Platform.Infrastructure.Entities.Student", "Student")
                        .WithMany("StudentsSections")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Platform.Infrastructure.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId");

                    b.HasOne("Platform.Infrastructure.Entities.Topic", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId");
                });

            modelBuilder.Entity("Platform.Infrastructure.Entities.StudentSemester", b =>
                {
                    b.HasOne("Platform.Infrastructure.Entities.Semester", "Semester")
                        .WithMany("StudentsSemesters")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Platform.Infrastructure.Entities.Student", "Student")
                        .WithMany("StudentsSemesters")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Platform.Infrastructure.Entities.SubjectArtifact", b =>
                {
                    b.HasOne("Platform.Infrastructure.Entities.Artifact", "Artifact")
                        .WithMany()
                        .HasForeignKey("ArtifactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Platform.Infrastructure.Entities.Subject", "Subject")
                        .WithMany("SubjectToArtifacts")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Platform.Infrastructure.Entities.TeacherSubject", b =>
                {
                    b.HasOne("Platform.Infrastructure.Entities.Subject", "Subject")
                        .WithMany("TeachersSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Platform.Infrastructure.Entities.Teacher", "Teacher")
                        .WithMany("TeachersSubjects")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Platform.Infrastructure.Entities.Topic", b =>
                {
                    b.HasOne("Platform.Infrastructure.Entities.Subject", "Subject")
                        .WithMany("Topics")
                        .HasForeignKey("SubjectId");
                });

            modelBuilder.Entity("Platform.Infrastructure.Entities.TopicArtifact", b =>
                {
                    b.HasOne("Platform.Infrastructure.Entities.Artifact", "Artifact")
                        .WithMany()
                        .HasForeignKey("ArtifactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Platform.Infrastructure.Entities.Topic", "Topic")
                        .WithMany("TopicToArtifact")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Platform.Infrastructure.Entities.Student", b =>
                {
                    b.HasOne("Platform.Infrastructure.Entities.Major", "Major")
                        .WithMany()
                        .HasForeignKey("MajorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
